package qipan;
import java.math.*;
/**
 * Created by k70 on 2017-06-07.
 */
class stack{
    public int xa;//xdingdian
    public int ya;
    public int ll;
    public int xi;
    public int yi;
    public int color;//?
    public stack(){

    }
}
class Stacks{

    public stack[] data;
    public int Top;
    public int Down;
    public Stacks(int n){
        int x=n*n/3;
        data=new stack[x];
        for(int i=0;i<data.length;i++)
            data[i]=new stack();
        Top=0;
        Down=0;
    }
    //ya

}
public class fgai {
    private int[][] DataPoint;
    private Stacks st;
    private int l;
    public fgai(int n){
        DataPoint=new int[n][n];
        l=n;
        st=new Stacks(n);

    }
    public int[][] getst(){
        return DataPoint;
    }
    //
    public boolean Increase(){
        int[] xy=new int[4];
        int xmid=st.data[st.Down].xa+st.data[st.Down].ll/2;
        int ymid=st.data[st.Down].ya+st.data[st.Down].ll/2;
        if(st.data[st.Down].xi>=xmid)
            if(st.data[st.Down].yi>=ymid)
                xy[3]=1;
            else
                xy[1]=1;
        else
        if(st.data[st.Down].yi>=ymid)
            xy[2]=1;
        else
            xy[0]=1;
        if(st.data[st.Down].ll/2>1&&st.data[st.Down].color!=1) {
            st.data[st.Top].xa = st.data[st.Down].xa;
            st.data[st.Top].ya = st.data[st.Down].ya;
            st.data[st.Top + 1].xa = xmid;
            st.data[st.Top + 1].ya = st.data[st.Down].ya;
            st.data[st.Top + 2].xa = st.data[st.Down].xa;
            st.data[st.Top + 2].ya = ymid;
            st.data[st.Top + 3].xa = xmid;
            st.data[st.Top + 3].ya = ymid;
            if (xy[0] != 1) {
                st.data[st.Top].xi = xmid - 1;
                st.data[st.Top].yi = ymid - 1;

                DataPoint[xmid - 1][ymid - 1] = 1;
            }
            if (xy[1] != 1) {
                st.data[st.Top + 1].xi = xmid;
                st.data[st.Top + 1].yi = ymid - 1;

                DataPoint[xmid][ymid - 1] = 1;
            }
            if (xy[2] != 1) {
                st.data[st.Top + 2].xi = xmid - 1;
                st.data[st.Top + 2].yi = ymid;

                DataPoint[xmid - 1][ymid] = 1;
            }
            if (xy[3] != 1) {
                st.data[st.Top + 3].xi = xmid;
                st.data[st.Top + 3].yi = ymid;

                DataPoint[xmid][ymid] = 1;
            }
            for (int i = 0; i < 4; i++) {
                if (xy[i] == 1) {
                    st.data[st.Top + i].xi = st.data[st.Down].xi;
                    st.data[st.Top + i].yi = st.data[st.Down].yi;
                }
                st.data[st.Top+i].ll=st.data[st.Down].ll/2;
                st.data[st.Top+i].color=0;

            }
            st.Top+=4;
            st.data[st.Down].color=1;
            st.Down+=1;
            return false;
        }
        else{
            if(xy[0]!=1){
                DataPoint[xmid-1][ymid-1]=1;
            }
            if(xy[1]!=1){
                DataPoint[xmid][ymid-1]=1;
            }
            if(xy[2]!=1){
                DataPoint[xmid-1][ymid]=1;
            }
            if(xy[3]!=1){
                DataPoint[xmid][ymid]=1;
            }

            if(st.data[st.Down].color!=1)
                st.data[st.Down].color=1;
            st.Down++;
            if(st.Down==st.Top)
                return true;
            else
                return false;
        }
    }
    //point?
    public void Inkk(int x1,int y1){
        DataPoint[x1][y1]=-1;

        st.data[0].xa=0;
        st.data[0].color=0;
        st.data[0].ya=0;
        st.data[0].ll=l;
        st.data[0].xi=x1;
        st.data[0].yi=y1;
        st.Top++;
    }
    public boolean Revoke(){
        if(st.Down<1)
            return false;
        else {
            st.Down--;
            int[] xyy=new int[4];
            int xmid=st.data[st.Down].xa+st.data[st.Down].ll/2;
            int ymid=st.data[st.Down].ya+st.data[st.Down].ll/2;
            if(st.data[st.Down].xi>=xmid)
                if(st.data[st.Down].yi>=ymid)
                    xyy[3]=1;
                else
                    xyy[1]=1;
            else
            if(st.data[st.Down].yi>=ymid)
                xyy[2]=1;
            else
                xyy[0]=1;
            if(xyy[0]!=1){
                DataPoint[xmid-1][ymid-1]=0;
            }
            if(xyy[1]!=1){
                DataPoint[xmid][ymid-1]=0;
            }
            if(xyy[2]!=1){
                DataPoint[xmid-1][ymid]=0;
            }
            if(xyy[3]!=1){
                DataPoint[xmid][ymid]=0;
            }
            return true;
        }
    }
    public  static void main(String args[]){
        fgai ss=new fgai(16);
        ss.Inkk(5,6);
        boolean b=false;
        int[][] data=ss.getst();
        int xx=0;
        while(!b){
            xx++;
            b=ss.Increase();
            if(xx%7==0) {
                ss.Revoke();
                for(int i=0;i<16;i++){
                    for(int j=0;j<16;j++){
                        System.out.print(" "+data[i][j]+" ");
                    }
                    System.out.print("\n");
                }
                System.out.println(xx);
            }
        }

        for(int i=0;i<16;i++){
            for(int j=0;j<16;j++){
                System.out.print(" "+data[i][j]+" ");
            }
            System.out.print("\n");
        }

    }

}
